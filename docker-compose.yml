version: '3.8'

services:
  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    container_name: my-board-postgres
    environment:
      POSTGRES_DB: my_board_of_directors
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - my-board-network
    restart: unless-stopped

  # Redis 快取
  redis:
    image: redis:7-alpine
    container_name: my-board-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - my-board-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # 後端 API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: my-board-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/my_board_of_directors
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-here
      AI_PROVIDER: openai
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - my-board-network
    restart: unless-stopped
    command: npm run dev

  # 前端應用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: my-board-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - my-board-network
    restart: unless-stopped
    command: npm run dev

  # Nginx 反向代理 (生產環境)
  nginx:
    image: nginx:alpine
    container_name: my-board-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - my-board-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  my-board-network:
    driver: bridge
